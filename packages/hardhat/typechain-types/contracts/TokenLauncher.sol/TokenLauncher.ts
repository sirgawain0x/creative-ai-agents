/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace TokenLauncher {
  export type TokenConfigStruct = {
    name: string;
    symbol: string;
    totalSupply: BigNumberish;
    fid: BigNumberish;
    imageUrl: string;
    socialProof: string;
    salt: BytesLike;
  };

  export type TokenConfigStructOutput = [
    name: string,
    symbol: string,
    totalSupply: bigint,
    fid: bigint,
    imageUrl: string,
    socialProof: string,
    salt: string
  ] & {
    name: string;
    symbol: string;
    totalSupply: bigint;
    fid: bigint;
    imageUrl: string;
    socialProof: string;
    salt: string;
  };

  export type PreSaleStruct = {
    tokenPrice: BigNumberish;
    minPurchase: BigNumberish;
    maxPurchase: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    tokensForSale: BigNumberish;
    tokensSold: BigNumberish;
    finalized: boolean;
    tokenAddress: AddressLike;
  };

  export type PreSaleStructOutput = [
    tokenPrice: bigint,
    minPurchase: bigint,
    maxPurchase: bigint,
    startTime: bigint,
    endTime: bigint,
    tokensForSale: bigint,
    tokensSold: bigint,
    finalized: boolean,
    tokenAddress: string
  ] & {
    tokenPrice: bigint;
    minPurchase: bigint;
    maxPurchase: bigint;
    startTime: bigint;
    endTime: bigint;
    tokensForSale: bigint;
    tokensSold: bigint;
    finalized: boolean;
    tokenAddress: string;
  };
}

export interface TokenLauncherInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyTokens"
      | "createPreSale"
      | "createToken"
      | "finalizePreSale"
      | "getPreSaleInfo"
      | "getUserTokens"
      | "owner"
      | "presales"
      | "renounceOwnership"
      | "transferOwnership"
      | "userTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PreSaleCreated"
      | "TokenCreated"
      | "TokensPurchased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPreSale",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [TokenLauncher.TokenConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizePreSale",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPreSaleInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "presales",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTokens",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPreSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizePreSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreSaleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "presales", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userTokens", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PreSaleCreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    tokenPrice: BigNumberish,
    tokensForSale: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    tokenPrice: bigint,
    tokensForSale: bigint,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    tokenPrice: bigint;
    tokensForSale: bigint;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    creator: AddressLike,
    name: string,
    symbol: string,
    totalSupply: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    creator: string,
    name: string,
    symbol: string,
    totalSupply: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    creator: string;
    name: string;
    symbol: string;
    totalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    tokenAddress: AddressLike,
    amount: BigNumberish,
    pricePaid: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    tokenAddress: string,
    amount: bigint,
    pricePaid: bigint
  ];
  export interface OutputObject {
    buyer: string;
    tokenAddress: string;
    amount: bigint;
    pricePaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenLauncher extends BaseContract {
  connect(runner?: ContractRunner | null): TokenLauncher;
  waitForDeployment(): Promise<this>;

  interface: TokenLauncherInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyTokens: TypedContractMethod<
    [tokenAddress: AddressLike, tokenAmount: BigNumberish],
    [void],
    "payable"
  >;

  createPreSale: TypedContractMethod<
    [
      tokenAddress: AddressLike,
      tokenPrice: BigNumberish,
      minPurchase: BigNumberish,
      maxPurchase: BigNumberish,
      tokensForSale: BigNumberish,
      startTime: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createToken: TypedContractMethod<
    [config: TokenLauncher.TokenConfigStruct],
    [string],
    "nonpayable"
  >;

  finalizePreSale: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getPreSaleInfo: TypedContractMethod<
    [tokenAddress: AddressLike],
    [TokenLauncher.PreSaleStructOutput],
    "view"
  >;

  getUserTokens: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  presales: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        tokenPrice: bigint;
        minPurchase: bigint;
        maxPurchase: bigint;
        startTime: bigint;
        endTime: bigint;
        tokensForSale: bigint;
        tokensSold: bigint;
        finalized: boolean;
        tokenAddress: string;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userTokens: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyTokens"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, tokenAmount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createPreSale"
  ): TypedContractMethod<
    [
      tokenAddress: AddressLike,
      tokenPrice: BigNumberish,
      minPurchase: BigNumberish,
      maxPurchase: BigNumberish,
      tokensForSale: BigNumberish,
      startTime: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createToken"
  ): TypedContractMethod<
    [config: TokenLauncher.TokenConfigStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizePreSale"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPreSaleInfo"
  ): TypedContractMethod<
    [tokenAddress: AddressLike],
    [TokenLauncher.PreSaleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTokens"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "presales"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        tokenPrice: bigint;
        minPurchase: bigint;
        maxPurchase: bigint;
        startTime: bigint;
        endTime: bigint;
        tokensForSale: bigint;
        tokensSold: bigint;
        finalized: boolean;
        tokenAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userTokens"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PreSaleCreated"
  ): TypedContractEvent<
    PreSaleCreatedEvent.InputTuple,
    PreSaleCreatedEvent.OutputTuple,
    PreSaleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreated"
  ): TypedContractEvent<
    TokenCreatedEvent.InputTuple,
    TokenCreatedEvent.OutputTuple,
    TokenCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TokensPurchased"
  ): TypedContractEvent<
    TokensPurchasedEvent.InputTuple,
    TokensPurchasedEvent.OutputTuple,
    TokensPurchasedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PreSaleCreated(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      PreSaleCreatedEvent.InputTuple,
      PreSaleCreatedEvent.OutputTuple,
      PreSaleCreatedEvent.OutputObject
    >;
    PreSaleCreated: TypedContractEvent<
      PreSaleCreatedEvent.InputTuple,
      PreSaleCreatedEvent.OutputTuple,
      PreSaleCreatedEvent.OutputObject
    >;

    "TokenCreated(address,address,string,string,uint256)": TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;
    TokenCreated: TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;

    "TokensPurchased(address,address,uint256,uint256)": TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;
    TokensPurchased: TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;
  };
}
